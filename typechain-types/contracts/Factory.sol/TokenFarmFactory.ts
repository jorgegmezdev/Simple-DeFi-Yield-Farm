/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TokenFarmFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "createFarm" | "farms" | "master"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FarmCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createFarm",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "farms", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "master", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createFarm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "master", data: BytesLike): Result;
}

export namespace FarmCreatedEvent {
  export type InputTuple = [
    farm: AddressLike,
    lpToken: AddressLike,
    owner: AddressLike
  ];
  export type OutputTuple = [farm: string, lpToken: string, owner: string];
  export interface OutputObject {
    farm: string;
    lpToken: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFarmFactory extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFarmFactory;
  waitForDeployment(): Promise<this>;

  interface: TokenFarmFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFarm: TypedContractMethod<
    [
      _lpToken: AddressLike,
      _dappToken: AddressLike,
      _initialReward: BigNumberish,
      _minReward: BigNumberish,
      _maxReward: BigNumberish,
      _claimFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  farms: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  master: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFarm"
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _dappToken: AddressLike,
      _initialReward: BigNumberish,
      _minReward: BigNumberish,
      _maxReward: BigNumberish,
      _claimFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "farms"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "master"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FarmCreated"
  ): TypedContractEvent<
    FarmCreatedEvent.InputTuple,
    FarmCreatedEvent.OutputTuple,
    FarmCreatedEvent.OutputObject
  >;

  filters: {
    "FarmCreated(address,address,address)": TypedContractEvent<
      FarmCreatedEvent.InputTuple,
      FarmCreatedEvent.OutputTuple,
      FarmCreatedEvent.OutputObject
    >;
    FarmCreated: TypedContractEvent<
      FarmCreatedEvent.InputTuple,
      FarmCreatedEvent.OutputTuple,
      FarmCreatedEvent.OutputObject
    >;
  };
}
