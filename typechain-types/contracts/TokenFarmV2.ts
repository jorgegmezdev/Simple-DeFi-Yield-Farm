/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TokenFarmV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimFee"
      | "claimRewards"
      | "collectedFees"
      | "dappToken"
      | "deposit"
      | "distributeRewardsAll"
      | "dynamicRewards"
      | "initialize"
      | "lpToken"
      | "maxRewardPerBlock"
      | "minRewardPerBlock"
      | "name"
      | "owner"
      | "pendingRewardsView"
      | "rewardPerBlock"
      | "setClaimFee"
      | "setDynamicRewards"
      | "setRewardPerBlock"
      | "setRewardRange"
      | "stakers"
      | "stakersInfo"
      | "totalStakingBalance"
      | "transferOwnership"
      | "withdraw"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposited"
      | "DynamicRewardsToggled"
      | "FeeWithdrawn"
      | "OwnershipTransferred"
      | "RewardPerBlockUpdated"
      | "RewardRangeUpdated"
      | "RewardsClaimed"
      | "RewardsDistributed"
      | "RewardsDistributedAll"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "claimFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dappToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewardsAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxRewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewardsView",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDynamicRewards",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dappToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewardsAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewardsView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakersInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DynamicRewardsToggledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPerBlockUpdatedEvent {
  export type InputTuple = [oldReward: BigNumberish, newReward: BigNumberish];
  export type OutputTuple = [oldReward: bigint, newReward: bigint];
  export interface OutputObject {
    oldReward: bigint;
    newReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRangeUpdatedEvent {
  export type InputTuple = [minReward: BigNumberish, maxReward: BigNumberish];
  export type OutputTuple = [minReward: bigint, maxReward: bigint];
  export interface OutputObject {
    minReward: bigint;
    maxReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, fee: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    blocksPassed: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    blocksPassed: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    blocksPassed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedAllEvent {
  export type InputTuple = [processed: BigNumberish];
  export type OutputTuple = [processed: bigint];
  export interface OutputObject {
    processed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TokenFarmV2 extends BaseContract {
  connect(runner?: ContractRunner | null): TokenFarmV2;
  waitForDeployment(): Promise<this>;

  interface: TokenFarmV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimFee: TypedContractMethod<[], [bigint], "view">;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  collectedFees: TypedContractMethod<[], [bigint], "view">;

  dappToken: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  distributeRewardsAll: TypedContractMethod<[], [void], "nonpayable">;

  dynamicRewards: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<
    [
      _dappToken: AddressLike,
      _lpToken: AddressLike,
      _initialReward: BigNumberish,
      _minReward: BigNumberish,
      _maxReward: BigNumberish,
      _claimFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  lpToken: TypedContractMethod<[], [string], "view">;

  maxRewardPerBlock: TypedContractMethod<[], [bigint], "view">;

  minRewardPerBlock: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRewardsView: TypedContractMethod<
    [beneficiary: AddressLike],
    [bigint],
    "view"
  >;

  rewardPerBlock: TypedContractMethod<[], [bigint], "view">;

  setClaimFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  setDynamicRewards: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setRewardPerBlock: TypedContractMethod<
    [newReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardRange: TypedContractMethod<
    [_minReward: BigNumberish, _maxReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  stakersInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        balance: bigint;
        checkpoint: bigint;
        pendingRewards: bigint;
        hasStaked: boolean;
        isStaking: boolean;
      }
    ],
    "view"
  >;

  totalStakingBalance: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectedFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dappToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributeRewardsAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dynamicRewards"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _dappToken: AddressLike,
      _lpToken: AddressLike,
      _initialReward: BigNumberish,
      _minReward: BigNumberish,
      _maxReward: BigNumberish,
      _claimFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxRewardPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minRewardPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRewardsView"
  ): TypedContractMethod<[beneficiary: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setClaimFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDynamicRewards"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardPerBlock"
  ): TypedContractMethod<[newReward: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardRange"
  ): TypedContractMethod<
    [_minReward: BigNumberish, _maxReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "stakersInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean, boolean] & {
        balance: bigint;
        checkpoint: bigint;
        pendingRewards: bigint;
        hasStaked: boolean;
        isStaking: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalStakingBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "DynamicRewardsToggled"
  ): TypedContractEvent<
    DynamicRewardsToggledEvent.InputTuple,
    DynamicRewardsToggledEvent.OutputTuple,
    DynamicRewardsToggledEvent.OutputObject
  >;
  getEvent(
    key: "FeeWithdrawn"
  ): TypedContractEvent<
    FeeWithdrawnEvent.InputTuple,
    FeeWithdrawnEvent.OutputTuple,
    FeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardPerBlockUpdated"
  ): TypedContractEvent<
    RewardPerBlockUpdatedEvent.InputTuple,
    RewardPerBlockUpdatedEvent.OutputTuple,
    RewardPerBlockUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardRangeUpdated"
  ): TypedContractEvent<
    RewardRangeUpdatedEvent.InputTuple,
    RewardRangeUpdatedEvent.OutputTuple,
    RewardRangeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributedAll"
  ): TypedContractEvent<
    RewardsDistributedAllEvent.InputTuple,
    RewardsDistributedAllEvent.OutputTuple,
    RewardsDistributedAllEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "DynamicRewardsToggled(bool)": TypedContractEvent<
      DynamicRewardsToggledEvent.InputTuple,
      DynamicRewardsToggledEvent.OutputTuple,
      DynamicRewardsToggledEvent.OutputObject
    >;
    DynamicRewardsToggled: TypedContractEvent<
      DynamicRewardsToggledEvent.InputTuple,
      DynamicRewardsToggledEvent.OutputTuple,
      DynamicRewardsToggledEvent.OutputObject
    >;

    "FeeWithdrawn(address,uint256)": TypedContractEvent<
      FeeWithdrawnEvent.InputTuple,
      FeeWithdrawnEvent.OutputTuple,
      FeeWithdrawnEvent.OutputObject
    >;
    FeeWithdrawn: TypedContractEvent<
      FeeWithdrawnEvent.InputTuple,
      FeeWithdrawnEvent.OutputTuple,
      FeeWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardPerBlockUpdated(uint256,uint256)": TypedContractEvent<
      RewardPerBlockUpdatedEvent.InputTuple,
      RewardPerBlockUpdatedEvent.OutputTuple,
      RewardPerBlockUpdatedEvent.OutputObject
    >;
    RewardPerBlockUpdated: TypedContractEvent<
      RewardPerBlockUpdatedEvent.InputTuple,
      RewardPerBlockUpdatedEvent.OutputTuple,
      RewardPerBlockUpdatedEvent.OutputObject
    >;

    "RewardRangeUpdated(uint256,uint256)": TypedContractEvent<
      RewardRangeUpdatedEvent.InputTuple,
      RewardRangeUpdatedEvent.OutputTuple,
      RewardRangeUpdatedEvent.OutputObject
    >;
    RewardRangeUpdated: TypedContractEvent<
      RewardRangeUpdatedEvent.InputTuple,
      RewardRangeUpdatedEvent.OutputTuple,
      RewardRangeUpdatedEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RewardsDistributed(address,uint256,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "RewardsDistributedAll(uint256)": TypedContractEvent<
      RewardsDistributedAllEvent.InputTuple,
      RewardsDistributedAllEvent.OutputTuple,
      RewardsDistributedAllEvent.OutputObject
    >;
    RewardsDistributedAll: TypedContractEvent<
      RewardsDistributedAllEvent.InputTuple,
      RewardsDistributedAllEvent.OutputTuple,
      RewardsDistributedAllEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
